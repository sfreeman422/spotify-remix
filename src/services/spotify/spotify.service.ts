import axios from 'axios';
import { UserService } from '../user/user.service';
import { MemberMusic, MemberPlaylistItem, SpotifyUserData } from './spotify.interface';

export class SpotifyService {
  baseUrl = 'https://api.spotify.com/v1';
  baseSelfUrl = `${this.baseUrl}/me`;
  baseUserUrl = `${this.baseUrl}/users`;

  userService = new UserService();

  getUserData(accessToken: string): Promise<SpotifyUserData> {
    return axios
      .get(this.baseSelfUrl, {
        headers: {
          Authorization: 'Bearer ' + accessToken,
        },
      })
      .then(response => {
        return response.data;
      })
      .catch(e => {
        console.error(e);
        throw new Error(e);
      });
  }

  getUserPlaylists(accessToken: string): Promise<any> {
    return axios.get(`${this.baseSelfUrl}/playlists`, {
      headers: {
        Authorization: accessToken,
      },
    });
  }

  createUserPlaylist(accessToken: string): Promise<any> {
    return this.userService.getUser({ accessToken: accessToken.split(' ')[1] }).then(user => {
      if (user) {
        return axios
          .post(
            `${this.baseUserUrl}/${user.spotifyId}/playlists`,
            {
              name: `${user.spotifyId}'s Remix Playlist`,
              public: false,
              collaborative: true,
              description: 'Playlist generated by SpotifyRemix',
            },
            {
              headers: {
                Authorization: accessToken,
              },
            },
          )
          .then(playlist => {
            return this.userService
              .savePlaylist(user, playlist.data.id)
              .then(playlist => this.populatePlaylist(playlist.playlistId));
          });
      } else {
        throw new Error('Unable to find user');
      }
    });
  }

  removeUserPlaylist(_accessToken: string) {
    console.log('not yet implemented');
  }

  subscribeToPlaylist(_accessToken: string, _playlistId: string) {
    console.log('not yet implemented');
  }

  async populatePlaylist(playlistId: string) {
    // get list of owners + subscribers (as far as WE know, we cannot use tthe followers key) in the playlist
    const members = await this.userService.getPlaylist(playlistId).then(playlist => {
      console.log(playlist);
      return playlist[0]?.members;
    });
    console.log('members');
    console.log(members);
    // For each member, get most recently playec + liked tracks
    const music: MemberMusic[] = members?.length
      ? await Promise.all(
          members.map(async member => {
            const userMusic = await Promise.all([
              axios
                .get(`${this.baseSelfUrl}/top/tracks?limit=50&time_range=short_term`, {
                  headers: {
                    Authorization: `Bearer ${member.accessToken}`,
                  },
                })
                .then(x => x.data.items)
                .catch(e => console.error(e)),
              axios
                .get(`${this.baseSelfUrl}/tracks?limit=50`, {
                  headers: {
                    Authorization: `Bearer ${member.accessToken}`,
                  },
                })
                .then(x => x.data.items)
                .catch(e => console.error(e)),
            ]);

            return {
              user: member,
              topTracks: userMusic[0],
              likedTracks: userMusic[1],
            } as MemberMusic;
          }),
        )
      : [];

    const numberOfItemsPerUser = this.getNumberOfItemsPerUser(music.length);
    // Create a list of songs to add to the playlist.
    // Save those songs in the DB to keep track of what has been added to a given playlist.
    const playlistItems: MemberPlaylistItem[] = music?.map(item => {
      const { user } = item;
      const tracks = [];
      const numberOfTracksPerCategory = Math.round(numberOfItemsPerUser / 2);
      // This is not final state. WE need to be able to check if the song has been added to the playlist before.
      // We also should not just grab the first n number of songs for a given user because that will not give any variabilioty.
      // We should instead grab a random track from each category based on numberOfTracksPerCategory
      for (let i = 0; i < numberOfTracksPerCategory; i += 1) {
        tracks.push(item.likedTracks[i]);
        tracks.push(item.topTracks[i]);
      }
      return {
        user,
        tracks,
      };
    });
    console.log('playlistItems');
    console.log(playlistItems);
    console.log(playlistItems[0].tracks);
    // Fire off mad network requests to add to playlist.
  }

  // This function sucks, but basically if we have under 10 ppl, use 50 songs total, if we have more than 10, use 5 songs each.
  getNumberOfItemsPerUser(numberOfUsers: number) {
    const minSongsPerUser = numberOfUsers * 6;
    const maxNumberOfSongs = 48;
    return minSongsPerUser > maxNumberOfSongs ? minSongsPerUser : Math.round(maxNumberOfSongs / numberOfUsers);
  }
}
