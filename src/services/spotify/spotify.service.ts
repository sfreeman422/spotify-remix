import axios from 'axios';
import { UserService } from '../user/user.service';
import { SpotifyUserData } from './spotify.interface';

export class SpotifyService {
  baseUrl = 'https://api.spotify.com/v1';
  baseSelfUrl = `${this.baseUrl}/me`;
  baseUserUrl = `${this.baseUrl}/users`;

  userService = new UserService();

  getUserData(accessToken: string): Promise<SpotifyUserData> {
    return axios
      .get(this.baseSelfUrl, {
        headers: {
          Authorization: 'Bearer ' + accessToken,
        },
      })
      .then(response => {
        return response.data;
      })
      .catch(e => {
        console.error(e);
        throw new Error(e);
      });
  }

  getUserPlaylists(accessToken: string): Promise<any> {
    return axios.get(this.baseSelfUrl + '/playlists', {
      headers: {
        Authorization: accessToken,
      },
    });
  }

  createUserPlaylist(accessToken: string): Promise<any> {
    return this.userService.getUser({ accessToken: accessToken.split(' ')[1] }).then(user => {
      if (user) {
        return axios.post(
          `${this.baseUserUrl}/${user.spotifyId}/playlists`,
          {
            name: `${user.spotifyId}'s Remix Playlist`,
            public: true,
            collaborative: false,
            description: 'Playlist generated by SpotifyRemix',
          },
          {
            headers: {
              Authorization: accessToken,
            },
          },
        );
      } else {
        throw new Error('Unable to find user');
      }
    });
  }

  removeUserPlaylist(_accessToken: string) {
    console.log('not yet implemented');
  }

  subscribeToPlaylist(_accessToken: string, _playlistId: string) {
    console.log('not yet implemented');
  }
}
